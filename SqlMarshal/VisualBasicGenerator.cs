// -----------------------------------------------------------------------
// <copyright file="VisualBasicGenerator.cs" company="Andrii Kurdiumov">
// Copyright (c) Andrii Kurdiumov. All rights reserved.
// </copyright>
// -----------------------------------------------------------------------

namespace SqlMarshal;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.VisualBasic;
using Microsoft.CodeAnalysis.VisualBasic.Syntax;
using System.Collections.Generic;
using System.Linq;
using static Microsoft.CodeAnalysis.VisualBasic.SyntaxFactory;

/// <summary>
/// Stored procedures generator for C#.
/// </summary>
[Generator(LanguageNames.VisualBasic)]
public class VisualBasicGenerator : AbstractGenerator
{
    private const string VisualBasicAttributeSource = @"' <auto-generated>
' Code generated by SqlMarshal Code Generator.
' Changes may cause incorrect behavior and will be lost if the code is
' regenerated.
' </auto-generated>

Namespace SqlMarshal.Annotations

<System.AttributeUsage(System.AttributeTargets.Method, AllowMultiple:=True)>
Friend NotInheritable Class SqlMarshalAttribute
    Inherits System.Attribute

    Public Sub New()
        StoredProcedureName = """"
    End Sub

    Public Sub New(name As String)
        StoredProcedureName = name
    End Sub

    Public Property StoredProcedureName As String
End Class

<System.AttributeUsage(System.AttributeTargets.Parameter, AllowMultiple:=False)>
Friend NotInheritable Class RawSqlAttribute
    Inherits System.Attribute

    Public Sub New()
    End Sub
End Class

<System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple:=False)>
Friend NotInheritable Class RepositoryAttribute
    Inherits System.Attribute

    Public Sub New(entityType As System.Type)
        EntityType = entityType
    End Sub

    Public Property EntityType As System.Type
End Class

End Namespace
";

    /// <inheritdoc/>
    public override void Initialize(GeneratorInitializationContext context)
    {
        context.RegisterForPostInitialization((pi) =>
        {
            pi.AddSource("SqlMarshalAttribute.vb", VisualBasicAttributeSource);
        });
        context.RegisterForSyntaxNotifications(() => new SyntaxReceiver());
    }

    /// <inheritdoc/>
    protected override SyntaxNode GetParameterDeclaration(IMethodSymbol methodSymbol, IParameterSymbol parameter, int index)
    {
        var typeAsClause = SimpleAsClause(ParseTypeName(parameter.Type.ToDisplayString()).WithLeadingTrivia(Whitespace(" ")));
        if (parameter.RefKind == RefKind.Out)
        {
            var parameterSyntax = Parameter(default, SyntaxTokenList.Create(Token(SyntaxKind.ByRefKeyword).WithTrailingTrivia(Whitespace(" "))), ModifiedIdentifier(parameter.Name).WithTrailingTrivia(Whitespace(" ")), typeAsClause, @default: null);
            return parameterSyntax;
        }
        else if (parameter.RefKind == RefKind.Ref)
        {
            var parameterSyntax = Parameter(default, SyntaxTokenList.Create(Token(SyntaxKind.ByRefKeyword).WithTrailingTrivia(Whitespace(" "))), ModifiedIdentifier(parameter.Name).WithTrailingTrivia(Whitespace(" ")), typeAsClause, @default: null);
            return parameterSyntax;
        }
        else
        {
            var parameterSyntax = Parameter(default, default, ModifiedIdentifier(parameter.Name).WithTrailingTrivia(Whitespace(" ")), typeAsClause, @default: null);
            return parameterSyntax;
        }
    }

    internal class SyntaxReceiver : ISqlMarshalSyntaxReceiver
    {
        public List<IMethodSymbol> Methods { get; } = new List<IMethodSymbol>();

        public void OnVisitSyntaxNode(GeneratorSyntaxContext context)
        {
            // any field with at least one attribute is a candidate for property generation
            if (context.Node is MethodBlockSyntax methodDeclarationSyntax)
            {
                // Get the symbol being declared by the field, and keep it if its annotated
                IMethodSymbol? methodSymbol = context.SemanticModel.GetDeclaredSymbol(context.Node) as IMethodSymbol;
                if (methodSymbol == null)
                {
                    return;
                }

                if (methodSymbol.GetAttributes().Any(ad => ad.AttributeClass?.ToDisplayString() == "SqlMarshalAttribute"))
                {
                    this.Methods.Add(methodSymbol);
                }

                if (methodSymbol.ContainingType.GetAttributes().Any(ad => ad.AttributeClass?.ToDisplayString() == "RepositoryAttribute"))
                {
                    this.Methods.Add(methodSymbol);
                }
            }
        }
    }
}
